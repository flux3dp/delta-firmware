#!/usr/bin/env python

from hashlib import sha512
from time import sleep
import argparse
import spidev
import struct

DUMMY_BYTE = 255
MEMORY_SIZE = 256 * 256 * 256


def task_read_rsa_key(spi):
    from fluxmonitor.misc import _security

    payload = read(spi, 31)
    real_opt = read_OPT(spi)
    l = struct.unpack("<H", payload[:2])[0]

    try:
        rsaobj = _security.RSAObject(der=payload[2:2 + l])
    except:
        print("Can not load key:")
        print("len", l)
        print(repr(payload[2:2 + l]))
        raise

    print(rsaobj.export_pem())
    print("")
    print(rsaobj.export_pubkey_pem())
    print("")
    hashedopt = sha512(rsaobj.export_pubkey_der())
    if hashedopt.digest() == real_opt:
        print("OPT OK: %s" % hashedopt.hexdigest())
    else:
        print("OPT Fail")


def task_write_rsa_key(spi):
    from fluxmonitor.misc import _security

    print("*" * 30)
    print("* Create new RSA key         *")
    print("*" * 30)
    print("")

    rsakey = _security.RSAObject()
    der = rsakey.export_der()

    rsakey = _security.RSAObject(der=der)
    serial = sha512(rsakey.export_pubkey_der()).digest()

    print(">> Dumped to SPI flash")
    spi = get_spi()
    payload = struct.pack("<H", len(der)) + der
    write(spi, 31, payload)

    write_OPT(spi, serial)
    print(">> OK")


def main():
    parser = argparse.ArgumentParser(description='Manage SPI contents')
    mutex_group = parser.add_mutually_exclusive_group()
    mutex_group.add_argument('-wr', dest='write_rsa', action='store_const',
                        const=True, default=False, help='Write RSA key')
    mutex_group.add_argument('-rr', dest='read_rsa', action='store_const',
                        const=True, default=False, help='Read RSA key')
    options = parser.parse_args()

    spi = get_spi()
    if options.write_rsa:
        task_write_rsa_key(spi)
    elif options.read_rsa:
        task_read_rsa_key(spi)
    else:
        print("Select a task")


def read_OPT(spi):
    spi.xfer([0xB1])
    buf = _read(spi, 0, 64)
    spi.xfer([0xC1])
    return buf


def write_OPT(spi, data):
    if len(data) != 64:
        raise RuntimeError("OPE len error", len(data))

    # Enter OTP
    spi.xfer([0xB1])

    spi.xfer([0x06])
    payload = [0x02, 0x00, 0x00, 0x00] + [ord(c) for c in data]
    spi.xfer(payload)
    spi.xfer([0x04])
    sleep(0.2)

    # Quit OTP
    spi.xfer([0xC1])

    spi.xfer([0x06])
    spi.xfer([0x2F, 0x03])
    spi.xfer([0x04])


def write(spi, sector, data):
    if not isinstance(sector, int) or sector < 0 or sector > 511:
        raise RuntimeError("sector must be int and < 512 or >= 0")

    if len(data) > 4096:
        raise RuntimeError("Data length must <= 4096")

    data = data + (b"\x00" * (4096 - len(data)))
    position = 4096 * sector
    _earse(spi, position)

    offset = 0
    while offset < 4096:
        _write(spi, position + offset, data[offset:offset + 256])
        sleep(0.1)
        offset += 256


def read(spi, sector):
    if not isinstance(sector, int) or sector < 0 or sector > 511:
        raise RuntimeError("sector must be int and < 512 or >= 0")

    position = 4096 * sector
    buf1 = _read(spi, position, 2048)
    buf2 = _read(spi, position + 2048, 2048)
    return buf1 + buf2


def _earse(spi, position):
    spi.xfer([0x06])
    spi.xfer([
        0x20,
        position // 65536,
        position //256 % 256,
        position % 256
    ])
    spi.xfer([0x04])
    sleep(1.0)


def _read(spi, position, length):
    payload = [
        0x03,
        position // 65536,
        position //256 % 256,
        position % 256
    ] + [DUMMY_BYTE] * length

    output = spi.xfer(payload)[4:]
    buf =  bytearray(length)

    for i in xrange(length):
        buf[i] = output[i]
    return bytes(buf)


def _write(spi, position, data):
    if position + len(data) > MEMORY_SIZE:
        raise RuntimeError("Write data size error")

    offset = position % 256
    if 256 - offset != len(data):
        raise RuntimeError("Data length must == %i" % (256 - offset))

    spi.xfer([0x06])

    payload = [
        0x02,
        position // 65536,
        position //256 % 256,
        position % 256
    ] + [ord(c) for c in data]

    spi.xfer(payload)
    spi.xfer([0x04])


def get_spi():
    # Select device
    spi = spidev.SpiDev(0, 1)

    spi.xfer([0xB9])
    sleep(0.02)
    spi.xfer([0xAB])
    sleep(0.02)
    spi.xfer([0x06])

    # Get information
    ret = spi.xfer([0x90, DUMMY_BYTE, DUMMY_BYTE, 0x00, DUMMY_BYTE, DUMMY_BYTE])
    manufacturer_id = ret[4]
    device_id = ret[5]

    assert manufacturer_id == 0xc2, manufacturer_id
    return spi


if __name__ == "__main__":
    main()
