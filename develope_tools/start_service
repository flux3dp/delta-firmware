#!/usr/bin/env python
import os
import sys
# import fluxmonitor

filename = ''
factory_egg = '/home/pi/monitor_dist' + '/' + 'fluxmonitor-0.8a2-py2.7-linux-armv6l.egg'


def main():
    pid = start_service()
    if pid != 0:  # parent
        update()


def start_service(force=False):
    from pkg_resources import load_entry_point
    service_list = ['fluxnetworkd', 'fluxhald', 'fluxupnpd', 'fluxusbd']

    for service in service_list:
        pid = os.fork()
        if pid == 0:
            print(sys.argv)
            load_entry_point('fluxmonitor', 'console_script', service)()
            break
        else:
            pass
    return pid


def update():
    for routine in [check_version, download_release, intall_release]:
        if routine():
            continue
        else:
            break


def intall_release():
    from subprocess import call
    _exit = call(['sudo', 'easy_install', filename])
    if _exit == 0:
        return True
    else:
        restore_factory()


def restore_factory():
    from subprocess import call
    _exit = call(['sudo', 'easy_install', factory_egg])
    if _exit == 0:
        return True
    else:
        # TODO: proper email
        print >> sys.stderr, ('\033[91m' + 'Restore Factory Fail!!\nPlease contact to us via info@flux.com' + '\033[0m')
        raise


def download_release():
    try:
        global filename
        print >> sys.stderr, ('try to download %s' % (filename))
        import urllib
        import os

        # TODO: change to proper user name
        dist_path = '/home/pi/monitor_dist'
        if not os.path.exists(dist_path):
            os.mkdir(dist_path)

        # TODO: change to real server
        urllib.urlretrieve("http://www.csie.ntu.edu.tw/~b00902053/" + filename, dist_path + '/' + filename)
        filename = dist_path + '/' + filename
        print >> sys.stderr, ('download success')
    except:
        return False
    else:
        return True


def check_version():
    global filename
    try:
        import urllib
        import urllib2
        from pkg_resources import parse_version, get_distribution

        # TODO: change to real server
        print >> sys.stderr, ('getting release data')

        url = 'http://www.csie.ntu.edu.tw/~b00902053/1'
        user_agent = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)'
        values = {'name': 'Yen', 'location': 'Taiwan', 'language': 'Python'}
        headers = {'User-Agent': user_agent}

        data = urllib.urlencode(values)
        req = urllib2.Request(url, data, headers)
        response = urllib2.urlopen(req)
        release_version, filename = response.read().strip().split('\n')
    except:
        # no internet?
        print >> sys.stderr, ("can't get release data")
        return False
    else:
        current_version = get_distribution('fluxmonitor').version
        if parse_version(release_version) > parse_version(current_version):
            print >> sys.stderr, ('Need to update\n release: %s, installed: %s' % (release_version, current_version))
            return True
        else:
            print >> sys.stderr, ('No need to update\n release: %s, installed: %s' % (release_version, current_version))
            return False


def child():
    print(os.getpid())
    os._exit(1)
    # os.execvp()

if __name__ == '__main__':
    main()
