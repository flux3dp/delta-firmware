#!/usr/bin/env python

import argparse
import socket
import json
import os

from fluxmonitor.config import add_config_arguments, load_config_arguments
from fluxmonitor import security

parser = argparse.ArgumentParser(description='list access id')
add_config_arguments(parser)

parser.add_argument('-a', dest='add_publickey', type=str, default=None,
                    help='Add trusted publickey file')

parser.add_argument('-d', dest='del_publickey', type=str, default=None,
                    help='Delete trusted publickey file')

options = parser.parse_args()
load_config_arguments(options)


def get_keyobj(filename):
    with open(filename, "r") as f:
        buf = f.read()
        if buf.startswith(b"-----BEGIN "):
            keyobj = security.get_keyobj(pem=buf)
        else:
            keyobj = security.get_keyobj(der=buf)

        if keyobj.is_private():
            pub_pem = keyobj.export_pubkey_pem()
            keyobj = security.get_keyobj(pem=pub_pem)

    return keyobj


if options.add_publickey:
    print("Add trusted publickey...")

    keyobj = get_keyobj(options.add_publickey)
    access_id = security.add_trusted_keyobj(keyobj)
    print("AccessID=%s" % access_id)
    print("Done")

elif options.del_publickey:
    print("Delete trusted publickey...")

    keyobj = get_keyobj(options.del_publickey)
    access_id = security.get_access_id(keyobj=keyobj)

    print("AccessID=%s" % access_id)
    filepath = security._get_path("pub", access_id)
    if os.path.isfile(filepath):
        os.unlink(filepath)
        print("Done")
    else:
        print("Not in trusted list")

else:
    print("Try: ./manage_access_id -h")
